//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Streaming.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Streaming;

public class update implements java.lang.Cloneable,
                               java.io.Serializable
{
    public String id;

    public int nr;

    public music modified;

    public music original;

    public update()
    {
        this.id = "";
        this.modified = new music();
        this.original = new music();
    }

    public update(String id, int nr, music modified, music original)
    {
        this.id = id;
        this.nr = nr;
        this.modified = modified;
        this.original = original;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        update r = null;
        if(rhs instanceof update)
        {
            r = (update)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.nr != r.nr)
            {
                return false;
            }
            if(this.modified != r.modified)
            {
                if(this.modified == null || r.modified == null || !this.modified.equals(r.modified))
                {
                    return false;
                }
            }
            if(this.original != r.original)
            {
                if(this.original == null || r.original == null || !this.original.equals(r.original))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Streaming::update");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, modified);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, original);
        return h_;
    }

    public update clone()
    {
        update c = null;
        try
        {
            c = (update)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.id);
        ostr.writeInt(this.nr);
        music.ice_write(ostr, this.modified);
        music.ice_write(ostr, this.original);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readString();
        this.nr = istr.readInt();
        this.modified = music.ice_read(istr);
        this.original = music.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, update v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public update ice_read(com.zeroc.Ice.InputStream istr)
    {
        update v = new update();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<update> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, update v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<update> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(update.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final update _nullMarshalValue = new update();

    /** @hidden */
    public static final long serialVersionUID = 5013612686258229135L;
}
