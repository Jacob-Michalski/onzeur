//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Streaming.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Streaming;

public interface StreamingServer extends com.zeroc.Ice.Object
{
    music[] shareTracklist(com.zeroc.Ice.Current current);

    int getStreamNumber(com.zeroc.Ice.Current current);

    void transferFragment(String ref, byte[] f, com.zeroc.Ice.Current current);

    String saveTrack(String ref, music m, com.zeroc.Ice.Current current);

    String modifyTrack(String ref, music m, music n, com.zeroc.Ice.Current current);

    String deleteTrack(String ref, music m, com.zeroc.Ice.Current current);

    String streamTrack(music m, com.zeroc.Ice.Current current);

    void pauseTrack(String ref, com.zeroc.Ice.Current current);

    void resumeTrack(String ref, com.zeroc.Ice.Current current);

    void stopTrack(String ref, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Streaming::StreamingServer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Streaming::StreamingServer";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shareTracklist(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        music[] ret = obj.shareTracklist(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MusicListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getStreamNumber(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        int ret = obj.getStreamNumber(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_transferFragment(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        byte[] iceP_f;
        iceP_ref = istr.readString();
        iceP_f = istr.readByteSeq();
        inS.endReadParams();
        obj.transferFragment(iceP_ref, iceP_f, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_saveTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        music iceP_m;
        iceP_ref = istr.readString();
        iceP_m = music.ice_read(istr);
        inS.endReadParams();
        String ret = obj.saveTrack(iceP_ref, iceP_m, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_modifyTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        music iceP_m;
        music iceP_n;
        iceP_ref = istr.readString();
        iceP_m = music.ice_read(istr);
        iceP_n = music.ice_read(istr);
        inS.endReadParams();
        String ret = obj.modifyTrack(iceP_ref, iceP_m, iceP_n, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        music iceP_m;
        iceP_ref = istr.readString();
        iceP_m = music.ice_read(istr);
        inS.endReadParams();
        String ret = obj.deleteTrack(iceP_ref, iceP_m, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_streamTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        music iceP_m;
        iceP_m = music.ice_read(istr);
        inS.endReadParams();
        String ret = obj.streamTrack(iceP_m, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_pauseTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        iceP_ref = istr.readString();
        inS.endReadParams();
        obj.pauseTrack(iceP_ref, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_resumeTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        iceP_ref = istr.readString();
        inS.endReadParams();
        obj.resumeTrack(iceP_ref, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stopTrack(StreamingServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ref;
        iceP_ref = istr.readString();
        inS.endReadParams();
        obj.stopTrack(iceP_ref, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "deleteTrack",
        "getStreamNumber",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "modifyTrack",
        "pauseTrack",
        "resumeTrack",
        "saveTrack",
        "shareTracklist",
        "stopTrack",
        "streamTrack",
        "transferFragment"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_deleteTrack(this, in, current);
            }
            case 1:
            {
                return _iceD_getStreamNumber(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_modifyTrack(this, in, current);
            }
            case 7:
            {
                return _iceD_pauseTrack(this, in, current);
            }
            case 8:
            {
                return _iceD_resumeTrack(this, in, current);
            }
            case 9:
            {
                return _iceD_saveTrack(this, in, current);
            }
            case 10:
            {
                return _iceD_shareTracklist(this, in, current);
            }
            case 11:
            {
                return _iceD_stopTrack(this, in, current);
            }
            case 12:
            {
                return _iceD_streamTrack(this, in, current);
            }
            case 13:
            {
                return _iceD_transferFragment(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
