# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `Streaming.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Streaming
_M_Streaming = Ice.openModule('Streaming')
__name__ = 'Streaming'

if 'music' not in _M_Streaming.__dict__:
    _M_Streaming.music = Ice.createTempClass()
    class music(object):
        def __init__(self, title='', artist='', filename=''):
            self.title = title
            self.artist = artist
            self.filename = filename

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.artist)
            _h = 5 * _h + Ice.getHash(self.filename)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Streaming.music):
                return NotImplemented
            else:
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                if self.filename is None or other.filename is None:
                    if self.filename != other.filename:
                        return (-1 if self.filename is None else 1)
                else:
                    if self.filename < other.filename:
                        return -1
                    elif self.filename > other.filename:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Streaming._t_music)

        __repr__ = __str__

    _M_Streaming._t_music = IcePy.defineStruct('::Streaming::music', music, (), (
        ('title', (), IcePy._t_string),
        ('artist', (), IcePy._t_string),
        ('filename', (), IcePy._t_string)
    ))

    _M_Streaming.music = music
    del music

if 'update' not in _M_Streaming.__dict__:
    _M_Streaming.update = Ice.createTempClass()
    class update(object):
        def __init__(self, id='', nr=0, modified=Ice._struct_marker, original=Ice._struct_marker):
            self.id = id
            self.nr = nr
            if modified is Ice._struct_marker:
                self.modified = _M_Streaming.music()
            else:
                self.modified = modified
            if original is Ice._struct_marker:
                self.original = _M_Streaming.music()
            else:
                self.original = original

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.nr)
            _h = 5 * _h + Ice.getHash(self.modified)
            _h = 5 * _h + Ice.getHash(self.original)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Streaming.update):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.nr is None or other.nr is None:
                    if self.nr != other.nr:
                        return (-1 if self.nr is None else 1)
                else:
                    if self.nr < other.nr:
                        return -1
                    elif self.nr > other.nr:
                        return 1
                if self.modified is None or other.modified is None:
                    if self.modified != other.modified:
                        return (-1 if self.modified is None else 1)
                else:
                    if self.modified < other.modified:
                        return -1
                    elif self.modified > other.modified:
                        return 1
                if self.original is None or other.original is None:
                    if self.original != other.original:
                        return (-1 if self.original is None else 1)
                else:
                    if self.original < other.original:
                        return -1
                    elif self.original > other.original:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Streaming._t_update)

        __repr__ = __str__

    _M_Streaming._t_update = IcePy.defineStruct('::Streaming::update', update, (), (
        ('id', (), IcePy._t_string),
        ('nr', (), IcePy._t_int),
        ('modified', (), _M_Streaming._t_music),
        ('original', (), _M_Streaming._t_music)
    ))

    _M_Streaming.update = update
    del update

if '_t_Bytes' not in _M_Streaming.__dict__:
    _M_Streaming._t_Bytes = IcePy.defineSequence('::Streaming::Bytes', (), IcePy._t_byte)

if '_t_MusicList' not in _M_Streaming.__dict__:
    _M_Streaming._t_MusicList = IcePy.defineSequence('::Streaming::MusicList', (), _M_Streaming._t_music)

_M_Streaming._t_Messenger = IcePy.defineValue('::Streaming::Messenger', Ice.Value, -1, (), False, True, None, ())

if 'MessengerPrx' not in _M_Streaming.__dict__:
    _M_Streaming.MessengerPrx = Ice.createTempClass()
    class MessengerPrx(Ice.ObjectPrx):

        def update(self, u, context=None):
            return _M_Streaming.Messenger._op_update.invoke(self, ((u, ), context))

        def updateAsync(self, u, context=None):
            return _M_Streaming.Messenger._op_update.invokeAsync(self, ((u, ), context))

        def begin_update(self, u, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.Messenger._op_update.begin(self, ((u, ), _response, _ex, _sent, context))

        def end_update(self, _r):
            return _M_Streaming.Messenger._op_update.end(self, _r)

        def stop(self, ref, context=None):
            return _M_Streaming.Messenger._op_stop.invoke(self, ((ref, ), context))

        def stopAsync(self, ref, context=None):
            return _M_Streaming.Messenger._op_stop.invokeAsync(self, ((ref, ), context))

        def begin_stop(self, ref, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.Messenger._op_stop.begin(self, ((ref, ), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_Streaming.Messenger._op_stop.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Streaming.MessengerPrx.ice_checkedCast(proxy, '::Streaming::Messenger', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Streaming.MessengerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Streaming::Messenger'
    _M_Streaming._t_MessengerPrx = IcePy.defineProxy('::Streaming::Messenger', MessengerPrx)

    _M_Streaming.MessengerPrx = MessengerPrx
    del MessengerPrx

    _M_Streaming.Messenger = Ice.createTempClass()
    class Messenger(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Streaming::Messenger')

        def ice_id(self, current=None):
            return '::Streaming::Messenger'

        @staticmethod
        def ice_staticId():
            return '::Streaming::Messenger'

        def update(self, u, current=None):
            raise NotImplementedError("servant method 'update' not implemented")

        def stop(self, ref, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Streaming._t_MessengerDisp)

        __repr__ = __str__

    _M_Streaming._t_MessengerDisp = IcePy.defineClass('::Streaming::Messenger', Messenger, (), None, ())
    Messenger._ice_type = _M_Streaming._t_MessengerDisp

    Messenger._op_update = IcePy.Operation('update', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Streaming._t_update, False, 0),), (), None, ())
    Messenger._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Streaming.Messenger = Messenger
    del Messenger

_M_Streaming._t_StreamingServer = IcePy.defineValue('::Streaming::StreamingServer', Ice.Value, -1, (), False, True, None, ())

if 'StreamingServerPrx' not in _M_Streaming.__dict__:
    _M_Streaming.StreamingServerPrx = Ice.createTempClass()
    class StreamingServerPrx(Ice.ObjectPrx):

        def shareTracklist(self, context=None):
            return _M_Streaming.StreamingServer._op_shareTracklist.invoke(self, ((), context))

        def shareTracklistAsync(self, context=None):
            return _M_Streaming.StreamingServer._op_shareTracklist.invokeAsync(self, ((), context))

        def begin_shareTracklist(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_shareTracklist.begin(self, ((), _response, _ex, _sent, context))

        def end_shareTracklist(self, _r):
            return _M_Streaming.StreamingServer._op_shareTracklist.end(self, _r)

        def getStreamNumber(self, context=None):
            return _M_Streaming.StreamingServer._op_getStreamNumber.invoke(self, ((), context))

        def getStreamNumberAsync(self, context=None):
            return _M_Streaming.StreamingServer._op_getStreamNumber.invokeAsync(self, ((), context))

        def begin_getStreamNumber(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_getStreamNumber.begin(self, ((), _response, _ex, _sent, context))

        def end_getStreamNumber(self, _r):
            return _M_Streaming.StreamingServer._op_getStreamNumber.end(self, _r)

        def transferFragment(self, ref, f, context=None):
            return _M_Streaming.StreamingServer._op_transferFragment.invoke(self, ((ref, f), context))

        def transferFragmentAsync(self, ref, f, context=None):
            return _M_Streaming.StreamingServer._op_transferFragment.invokeAsync(self, ((ref, f), context))

        def begin_transferFragment(self, ref, f, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_transferFragment.begin(self, ((ref, f), _response, _ex, _sent, context))

        def end_transferFragment(self, _r):
            return _M_Streaming.StreamingServer._op_transferFragment.end(self, _r)

        def saveTrack(self, ref, m, context=None):
            return _M_Streaming.StreamingServer._op_saveTrack.invoke(self, ((ref, m), context))

        def saveTrackAsync(self, ref, m, context=None):
            return _M_Streaming.StreamingServer._op_saveTrack.invokeAsync(self, ((ref, m), context))

        def begin_saveTrack(self, ref, m, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_saveTrack.begin(self, ((ref, m), _response, _ex, _sent, context))

        def end_saveTrack(self, _r):
            return _M_Streaming.StreamingServer._op_saveTrack.end(self, _r)

        def modifyTrack(self, ref, m, n, context=None):
            return _M_Streaming.StreamingServer._op_modifyTrack.invoke(self, ((ref, m, n), context))

        def modifyTrackAsync(self, ref, m, n, context=None):
            return _M_Streaming.StreamingServer._op_modifyTrack.invokeAsync(self, ((ref, m, n), context))

        def begin_modifyTrack(self, ref, m, n, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_modifyTrack.begin(self, ((ref, m, n), _response, _ex, _sent, context))

        def end_modifyTrack(self, _r):
            return _M_Streaming.StreamingServer._op_modifyTrack.end(self, _r)

        def deleteTrack(self, ref, m, context=None):
            return _M_Streaming.StreamingServer._op_deleteTrack.invoke(self, ((ref, m), context))

        def deleteTrackAsync(self, ref, m, context=None):
            return _M_Streaming.StreamingServer._op_deleteTrack.invokeAsync(self, ((ref, m), context))

        def begin_deleteTrack(self, ref, m, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_deleteTrack.begin(self, ((ref, m), _response, _ex, _sent, context))

        def end_deleteTrack(self, _r):
            return _M_Streaming.StreamingServer._op_deleteTrack.end(self, _r)

        def streamTrack(self, m, context=None):
            return _M_Streaming.StreamingServer._op_streamTrack.invoke(self, ((m, ), context))

        def streamTrackAsync(self, m, context=None):
            return _M_Streaming.StreamingServer._op_streamTrack.invokeAsync(self, ((m, ), context))

        def begin_streamTrack(self, m, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_streamTrack.begin(self, ((m, ), _response, _ex, _sent, context))

        def end_streamTrack(self, _r):
            return _M_Streaming.StreamingServer._op_streamTrack.end(self, _r)

        def pauseTrack(self, ref, context=None):
            return _M_Streaming.StreamingServer._op_pauseTrack.invoke(self, ((ref, ), context))

        def pauseTrackAsync(self, ref, context=None):
            return _M_Streaming.StreamingServer._op_pauseTrack.invokeAsync(self, ((ref, ), context))

        def begin_pauseTrack(self, ref, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_pauseTrack.begin(self, ((ref, ), _response, _ex, _sent, context))

        def end_pauseTrack(self, _r):
            return _M_Streaming.StreamingServer._op_pauseTrack.end(self, _r)

        def resumeTrack(self, ref, context=None):
            return _M_Streaming.StreamingServer._op_resumeTrack.invoke(self, ((ref, ), context))

        def resumeTrackAsync(self, ref, context=None):
            return _M_Streaming.StreamingServer._op_resumeTrack.invokeAsync(self, ((ref, ), context))

        def begin_resumeTrack(self, ref, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_resumeTrack.begin(self, ((ref, ), _response, _ex, _sent, context))

        def end_resumeTrack(self, _r):
            return _M_Streaming.StreamingServer._op_resumeTrack.end(self, _r)

        def stopTrack(self, ref, context=None):
            return _M_Streaming.StreamingServer._op_stopTrack.invoke(self, ((ref, ), context))

        def stopTrackAsync(self, ref, context=None):
            return _M_Streaming.StreamingServer._op_stopTrack.invokeAsync(self, ((ref, ), context))

        def begin_stopTrack(self, ref, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.StreamingServer._op_stopTrack.begin(self, ((ref, ), _response, _ex, _sent, context))

        def end_stopTrack(self, _r):
            return _M_Streaming.StreamingServer._op_stopTrack.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Streaming.StreamingServerPrx.ice_checkedCast(proxy, '::Streaming::StreamingServer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Streaming.StreamingServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Streaming::StreamingServer'
    _M_Streaming._t_StreamingServerPrx = IcePy.defineProxy('::Streaming::StreamingServer', StreamingServerPrx)

    _M_Streaming.StreamingServerPrx = StreamingServerPrx
    del StreamingServerPrx

    _M_Streaming.StreamingServer = Ice.createTempClass()
    class StreamingServer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Streaming::StreamingServer')

        def ice_id(self, current=None):
            return '::Streaming::StreamingServer'

        @staticmethod
        def ice_staticId():
            return '::Streaming::StreamingServer'

        def shareTracklist(self, current=None):
            raise NotImplementedError("servant method 'shareTracklist' not implemented")

        def getStreamNumber(self, current=None):
            raise NotImplementedError("servant method 'getStreamNumber' not implemented")

        def transferFragment(self, ref, f, current=None):
            raise NotImplementedError("servant method 'transferFragment' not implemented")

        def saveTrack(self, ref, m, current=None):
            raise NotImplementedError("servant method 'saveTrack' not implemented")

        def modifyTrack(self, ref, m, n, current=None):
            raise NotImplementedError("servant method 'modifyTrack' not implemented")

        def deleteTrack(self, ref, m, current=None):
            raise NotImplementedError("servant method 'deleteTrack' not implemented")

        def streamTrack(self, m, current=None):
            raise NotImplementedError("servant method 'streamTrack' not implemented")

        def pauseTrack(self, ref, current=None):
            raise NotImplementedError("servant method 'pauseTrack' not implemented")

        def resumeTrack(self, ref, current=None):
            raise NotImplementedError("servant method 'resumeTrack' not implemented")

        def stopTrack(self, ref, current=None):
            raise NotImplementedError("servant method 'stopTrack' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Streaming._t_StreamingServerDisp)

        __repr__ = __str__

    _M_Streaming._t_StreamingServerDisp = IcePy.defineClass('::Streaming::StreamingServer', StreamingServer, (), None, ())
    StreamingServer._ice_type = _M_Streaming._t_StreamingServerDisp

    StreamingServer._op_shareTracklist = IcePy.Operation('shareTracklist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Streaming._t_MusicList, False, 0), ())
    StreamingServer._op_getStreamNumber = IcePy.Operation('getStreamNumber', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    StreamingServer._op_transferFragment = IcePy.Operation('transferFragment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Streaming._t_Bytes, False, 0)), (), None, ())
    StreamingServer._op_saveTrack = IcePy.Operation('saveTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Streaming._t_music, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    StreamingServer._op_modifyTrack = IcePy.Operation('modifyTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Streaming._t_music, False, 0), ((), _M_Streaming._t_music, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    StreamingServer._op_deleteTrack = IcePy.Operation('deleteTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Streaming._t_music, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    StreamingServer._op_streamTrack = IcePy.Operation('streamTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Streaming._t_music, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    StreamingServer._op_pauseTrack = IcePy.Operation('pauseTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    StreamingServer._op_resumeTrack = IcePy.Operation('resumeTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    StreamingServer._op_stopTrack = IcePy.Operation('stopTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Streaming.StreamingServer = StreamingServer
    del StreamingServer

# End of module Streaming
