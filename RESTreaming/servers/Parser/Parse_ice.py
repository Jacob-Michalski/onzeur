# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `Parse.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Parse
_M_Parse = Ice.openModule('Parse')
__name__ = 'Parse'

if 'Resparse' not in _M_Parse.__dict__:
    _M_Parse.Resparse = Ice.createTempClass()
    class Resparse(object):
        def __init__(self, action='', title='', artist=''):
            self.action = action
            self.title = title
            self.artist = artist

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.action)
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.artist)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Parse.Resparse):
                return NotImplemented
            else:
                if self.action is None or other.action is None:
                    if self.action != other.action:
                        return (-1 if self.action is None else 1)
                else:
                    if self.action < other.action:
                        return -1
                    elif self.action > other.action:
                        return 1
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Parse._t_Resparse)

        __repr__ = __str__

    _M_Parse._t_Resparse = IcePy.defineStruct('::Parse::Resparse', Resparse, (), (
        ('action', (), IcePy._t_string),
        ('title', (), IcePy._t_string),
        ('artist', (), IcePy._t_string)
    ))

    _M_Parse.Resparse = Resparse
    del Resparse

_M_Parse._t_Parser = IcePy.defineValue('::Parse::Parser', Ice.Value, -1, (), False, True, None, ())

if 'ParserPrx' not in _M_Parse.__dict__:
    _M_Parse.ParserPrx = Ice.createTempClass()
    class ParserPrx(Ice.ObjectPrx):

        def parseRequest(self, request, context=None):
            return _M_Parse.Parser._op_parseRequest.invoke(self, ((request, ), context))

        def parseRequestAsync(self, request, context=None):
            return _M_Parse.Parser._op_parseRequest.invokeAsync(self, ((request, ), context))

        def begin_parseRequest(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_Parse.Parser._op_parseRequest.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_parseRequest(self, _r):
            return _M_Parse.Parser._op_parseRequest.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Parse.ParserPrx.ice_checkedCast(proxy, '::Parse::Parser', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Parse.ParserPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Parse::Parser'
    _M_Parse._t_ParserPrx = IcePy.defineProxy('::Parse::Parser', ParserPrx)

    _M_Parse.ParserPrx = ParserPrx
    del ParserPrx

    _M_Parse.Parser = Ice.createTempClass()
    class Parser(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Parse::Parser')

        def ice_id(self, current=None):
            return '::Parse::Parser'

        @staticmethod
        def ice_staticId():
            return '::Parse::Parser'

        def parseRequest(self, request, current=None):
            raise NotImplementedError("servant method 'parseRequest' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Parse._t_ParserDisp)

        __repr__ = __str__

    _M_Parse._t_ParserDisp = IcePy.defineClass('::Parse::Parser', Parser, (), None, ())
    Parser._ice_type = _M_Parse._t_ParserDisp

    Parser._op_parseRequest = IcePy.Operation('parseRequest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Parse._t_Resparse, False, 0), ())

    _M_Parse.Parser = Parser
    del Parser

# End of module Parse
