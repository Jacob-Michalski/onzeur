# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `Parser.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Streaming
_M_Streaming = Ice.openModule('Streaming')
__name__ = 'Streaming'

if 'response' not in _M_Streaming.__dict__:
    _M_Streaming.response = Ice.createTempClass()
    class response(object):
        def __init__(self, action='', titre='', artiste='', imgUrl='', ref='', statusCode=''):
            self.action = action
            self.titre = titre
            self.artiste = artiste
            self.imgUrl = imgUrl
            self.ref = ref
            self.statusCode = statusCode

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.action)
            _h = 5 * _h + Ice.getHash(self.titre)
            _h = 5 * _h + Ice.getHash(self.artiste)
            _h = 5 * _h + Ice.getHash(self.imgUrl)
            _h = 5 * _h + Ice.getHash(self.ref)
            _h = 5 * _h + Ice.getHash(self.statusCode)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Streaming.response):
                return NotImplemented
            else:
                if self.action is None or other.action is None:
                    if self.action != other.action:
                        return (-1 if self.action is None else 1)
                else:
                    if self.action < other.action:
                        return -1
                    elif self.action > other.action:
                        return 1
                if self.titre is None or other.titre is None:
                    if self.titre != other.titre:
                        return (-1 if self.titre is None else 1)
                else:
                    if self.titre < other.titre:
                        return -1
                    elif self.titre > other.titre:
                        return 1
                if self.artiste is None or other.artiste is None:
                    if self.artiste != other.artiste:
                        return (-1 if self.artiste is None else 1)
                else:
                    if self.artiste < other.artiste:
                        return -1
                    elif self.artiste > other.artiste:
                        return 1
                if self.imgUrl is None or other.imgUrl is None:
                    if self.imgUrl != other.imgUrl:
                        return (-1 if self.imgUrl is None else 1)
                else:
                    if self.imgUrl < other.imgUrl:
                        return -1
                    elif self.imgUrl > other.imgUrl:
                        return 1
                if self.ref is None or other.ref is None:
                    if self.ref != other.ref:
                        return (-1 if self.ref is None else 1)
                else:
                    if self.ref < other.ref:
                        return -1
                    elif self.ref > other.ref:
                        return 1
                if self.statusCode is None or other.statusCode is None:
                    if self.statusCode != other.statusCode:
                        return (-1 if self.statusCode is None else 1)
                else:
                    if self.statusCode < other.statusCode:
                        return -1
                    elif self.statusCode > other.statusCode:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Streaming._t_response)

        __repr__ = __str__

    _M_Streaming._t_response = IcePy.defineStruct('::Streaming::response', response, (), (
        ('action', (), IcePy._t_string),
        ('titre', (), IcePy._t_string),
        ('artiste', (), IcePy._t_string),
        ('imgUrl', (), IcePy._t_string),
        ('ref', (), IcePy._t_string),
        ('statusCode', (), IcePy._t_string)
    ))

    _M_Streaming.response = response
    del response

_M_Streaming._t_Parser = IcePy.defineValue('::Streaming::Parser', Ice.Value, -1, (), False, True, None, ())

if 'ParserPrx' not in _M_Streaming.__dict__:
    _M_Streaming.ParserPrx = Ice.createTempClass()
    class ParserPrx(Ice.ObjectPrx):

        def parseRequest(self, request, context=None):
            return _M_Streaming.Parser._op_parseRequest.invoke(self, ((request, ), context))

        def parseRequestAsync(self, request, context=None):
            return _M_Streaming.Parser._op_parseRequest.invokeAsync(self, ((request, ), context))

        def begin_parseRequest(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_Streaming.Parser._op_parseRequest.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_parseRequest(self, _r):
            return _M_Streaming.Parser._op_parseRequest.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Streaming.ParserPrx.ice_checkedCast(proxy, '::Streaming::Parser', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Streaming.ParserPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Streaming::Parser'
    _M_Streaming._t_ParserPrx = IcePy.defineProxy('::Streaming::Parser', ParserPrx)

    _M_Streaming.ParserPrx = ParserPrx
    del ParserPrx

    _M_Streaming.Parser = Ice.createTempClass()
    class Parser(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Streaming::Parser')

        def ice_id(self, current=None):
            return '::Streaming::Parser'

        @staticmethod
        def ice_staticId():
            return '::Streaming::Parser'

        def parseRequest(self, request, current=None):
            raise NotImplementedError("servant method 'parseRequest' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Streaming._t_ParserDisp)

        __repr__ = __str__

    _M_Streaming._t_ParserDisp = IcePy.defineClass('::Streaming::Parser', Parser, (), None, ())
    Parser._ice_type = _M_Streaming._t_ParserDisp

    Parser._op_parseRequest = IcePy.Operation('parseRequest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Streaming._t_response, False, 0), ())

    _M_Streaming.Parser = Parser
    del Parser

# End of module Streaming
